# ===================================================================
# GEMS - MVP Blueprint v3
# ===================================================================
# Iteration: 5
# Focus: 核心架構升級：效能與擴展性 (Core Architecture Upgrade: Performance & Scalability)
# Status: Development Ready
# ===================================================================

projectInfo:
  projectName: "GEMS - 視覺化敏捷流程管理工具"
  executiveSummary: "一個基於 Google Apps Script 和 Google Sheets 的輕量級網頁應用，旨在將定義好的敏捷流程視覺化。本次迭代將對核心架構進行重大升級，引入前端快取與 GitHub 內容後端。"
  sprintGoal: "啟動 GEMS 的核心架構升級。核心任務是實現前端快取以達成零延遲的 UI 互動，並將內容儲存後端重構至 GitHub，實現專業、可靠的版本控制，為平台未來的成長奠定基礎。"
  version: "v3.3 (Final & Aligned)"

# --- 商業分析 (Business Analysis - BA Scope) ---
businessAnalysis:
  targetAudience:
    - persona: "Vibe CEO / 日常使用者"
      needs: "需要一個響應迅速、無延遲感的應用，以便能流暢地在不同專案和產物之間進行導航與審查，提升工作效率。"
    - persona: "開發團隊 / 系統維護者"
      needs: "需要一個具備專業版本控制、職責清晰的後端架構，以提高系統的可維護性、擴展性與數據安全性。"
  successMetrics:
    - id: "SM-5.1"
      metric: "UI 互動延遲 (UI Interaction Latency)"
      target: "在數據預載入完成後，所有前端 UI 互動（如切換專案、點擊節點）的響應時間應低於 100 毫秒。"
    - id: "SM-5.2"
      metric: "內容儲存分離率 (Content Storage Separation Rate)"
      target: "100% 的產物 YAML 內容必須儲存在 GitHub。Google Sheets 的 'Artifacts' 工作表不應再包含任何 raw_content 欄位。"
  coreBusinessValue:
    - value: "極致提升使用者體驗"
      description: "透過前端快取，將 GEMS 從一個『可用』的工具，提升為一個『好用』的、響應流暢的專業應用。"
    - value: "奠定未來擴展基石"
      description: "引入 GitHub 作為內容後端，實現專業的版本控制，為未來更複雜的協作與內容管理功能掃清障礙。"

# --- 系統架構 (System Architecture - SA Scope) [已最終定稿] ---
architecture:
  highLevelArchitecture:
    architecturalStyle: "演進為『具備前端狀態的 Serverless Web App』架構。"
    architecturalPrinciples:
      - principle: "狀態前移 (Stateful Frontend, Stateless Backend)"
        description: "將應用程式的『UI 狀態』移至前端瀏覽器中進行管理，後端專注於無狀態的數據 CRUD 操作。"
      - principle: "索引與內容分離 (Index-Content Separation)"
        description: "嚴格區分『元數據索引』（儲存於 Google Sheets）與『文件內容』（儲存於 GitHub），提升系統的模組化與擴展性。"
    systemDiagram: |
      graph TD;
          A[使用者瀏覽-前端快取] --> B[HTML Service (UI)];
          B -- Client-side JS --> C{Google Apps Script (Server-side)};
          C -- SpreadsheetApp (讀寫索引) --> D[Google Sheets (Metadata Index)];
          C -- UrlFetchApp (讀寫內容) --> E[GitHub API v3 (Content Store)];
          C -- PropertiesService --> F[Script Properties (API Keys)];
    frontendBackendIntegration:
      method: "`google.script.run`"
      description: "前端 JavaScript 透過 `google.script.run` 非同步呼叫後端的 `.gs` 函式。本次迭代將引入前端快取機制，以大幅減少此類呼叫的頻率。"

  techStack:
    - category: "Frontend State Management"
      technology: "In-memory JavaScript Object"
      reason: "[本次迭代引入] 作為前端的『單一事實來源』，實現即時 UI 互動。"
    - category: "Backend Runtime"
      technology: "Google Apps Script (V8 Runtime)"
      reason: "[未變更] 核心後端運行環境。"
    - category: "Database"
      technology: "Google Sheets"
      reason: "[職責變更] 從主資料庫變更為『元數據索引 (Metadata Index)』。"
    - category: "Content Store"
      technology: "GitHub Repository (via REST API v3)"
      reason: "[本次迭代引入] 作為所有 YAML 文件的主要儲存與版本控制系統。"
    - category: "Key Libraries"
      technology: "js-yaml"
      reason: "[未變更] 用於在後端高效解析傳入的 YAML 文件內容。"

  dataModels:
    - modelName: "Projects"
      description: "儲存專案的清單與基本資訊。此模型在本次迭代中結構不變。"
      fields:
        - { name: "project_id", type: "string (Primary Key)" }
        - { name: "project_name", type: "string" }
        - { name: "status", type: "string" }
        - { name: "created_at", type: "Timestamp" }
    - modelName: "Artifacts"
      description: "儲存所有產物的元數據索引。文件內容本身儲存在 GitHub。"
      fields:
        - { name: "artifact_id", type: "string (Primary Key)" }
        - { name: "project_id", type: "string (Foreign Key)" }
        - { name: "node_id", type: "string" }
        - { name: "artifact_type", type: "string" }
        - { name: "version", type: "string" }
        - { name: "key_info_1", type: "string" }
        - { name: "key_info_2", type: "string" }
        - { name: "github_file_url", type: "string (NEW)" }
        - { name: "github_commit_hash", type: "string (NEW)" }
        - { name: "created_at", type: "Timestamp" }
        - { name: "raw_content", type: "string (DEPRECATED - To be removed)" }
    - modelName: "Ideas"
      description: "儲存來自『創意牆』的文字筆記。此模型在本次迭代中結構不變。"
      fields:
        - { name: "idea_id", type: "string (Primary Key)" }
        - { name: "project_id", type: "string (Foreign Key)" }
        - { name: "content", type: "string" }
        - { name: "created_at", type: "Timestamp" }
        - { name: "created_by", type: "string" }
        - { name: "status", type: "string" }
        - { name: "tags", type: "string (Comma-separated)" }

  coreFunctionStrategy:
    - function: "initializeAppWithCache()"
      strategy: "應用啟動時的唯一數據載入函式。查詢並聚合所有元數據（專案、產物），一次性返回給前端進行快取。"
      performanceConsiderations: "此函式執行時間將直接影響應用初始載入速度，後端需優化 Google Sheets 的讀取操作（如使用 `getValues()` 一次性讀取）。"
      securityConsiderations: "無直接安全影響。返回的數據應不包含任何敏感資訊。"
      testingStrategy:
        riskLevel: "P1 (High)"
        requiredTests:
          - type: "Integration Test"
            description: "驗證函式能正確地從 Google Sheets 聚合數據，並返回符合約定格式的 JSON 物件。"
          - type: "E2E Test"
            description: "驗證前端在呼叫此函式後，能成功初始化快取並渲染初始 UI。"
    - function: "getArtifactContent(artifactId)"
      strategy: "根據 artifactId，從 Google Sheets 獲取 GitHub URL，再透過 GitHub API 獲取文件內容返回給前端。"
      performanceConsiderations: "此函式的效能依賴 GitHub API 的回應速度。應處理 API 呼叫的超時情況。"
      securityConsiderations: "對 GitHub API 的請求必須使用安全的認證方式（PAT），且 PAT 應儲存在 PropertiesService 中。"
      testingStrategy:
        riskLevel: "P1 (High)"
        requiredTests:
          - type: "Integration Test"
            description: "測試完整的端到端流程：從接收 artifactId，到查詢 Sheets，再到成功從 GitHub 返回文件內容。"
          - type: "Integration Test"
            description: "測試錯誤處理，例如當 GitHub 檔案不存在或認證失敗時，函式應返回清晰的錯誤訊息。"
    - function: "createOrUpdateArtifact(artifactData, content)"
      strategy: "具備事務性的寫入操作。先將內容 commit 至 GitHub，若成功，再將元數據（包含 commit hash 和 file URL）寫回 Google Sheets。"
      performanceConsiderations: "寫入操作的延遲主要來自 GitHub API。應在前端實施『樂觀更新 (Optimistic Update)』以改善使用者體驗。"
      securityConsiderations: "必須嚴格驗證傳入的 artifactData，防止惡意內容寫入資料庫。對 GitHub 的寫入操作需要適當的權限控制。"
      testingStrategy:
        riskLevel: "P0 (Critical)"
        requiredTests:
          - type: "Integration Test"
            description: "驗證完整的寫入流程，確保 GitHub commit 成功後，Google Sheets 的元數據也被正確更新。"
          - type: "Integration Test"
            description: "測試事務性保障：若 GitHub 操作失敗，驗證 Google Sheets 的數據沒有被修改。"
          - type: "Integration Test"
            description: "測試事務性保障：若 Sheets 操作失敗，驗證系統有留下可追溯的錯誤日誌。"

  deploymentAndOperations:
    dataMigration:
      planName: "MIG-S5-001: Content Migration to GitHub"
      steps:
        - "1. [準備] 撰寫並測試一個名為 `migrateContentToGitHub` 的後端 GAS 函式。"
        - "2. [執行] 在部署前，手動執行此函式。"
        - "3. [驗證] 透過抽樣比對，確保數據 100% 準確遷移。"
        - "4. [清理] 在確認遷移成功後，手動刪除 `raw_content` 欄位。"
    security: "GitHub Personal Access Token (PAT) 必須儲存在 Google Apps Script 的 `PropertiesService` 中，嚴禁硬編碼。"
    monitoring: "所有對 GitHub API 的呼叫，無論成功或失敗，都必須在後端留下詳細的執行日誌。"
    rollbackPlan: "若部署後出現重大故障，立即透過 Apps Script 版本管理介面切回上一穩定版本。系統將處於『唯讀索引』的降級服務狀態。"

# --- 第五次迭代規劃 (PS Scope) [已細化] ---
requirements:
  inScope:
    - { id: "FR19", description: "應用程式必須在啟動時預載入所有專案與產物的元數據至前端快取。" }
    - { id: "FR20", description: "所有產物（YAML 文件）的內容必須從 Google Sheets 遷移至指定的 GitHub Repository。" }
    - { id: "FR21", description: "後端 API 必須重構，以支持從 GitHub 讀取和寫入產物內容。" }
  outOfScope:
    - { id: "OOS-005", description: "標準化並擴展 Mock 框架 (`NIC-S4-003`) 的任務將推遲。" }
  nonFunctional:
    - { id: "NFR9", description: "數據預載入後，前端 UI 互動的響應時間必須低於 100 毫秒。" }
    - { id: "NFR10",description: "系統必須確保 Google Sheets 中的索引與 GitHub 中的內容之間 100% 的數據一致性。" }

epicsAndStories:
  - epic: "Epic 9: 核心效能升級 - 前端快取"
    description: "此史詩旨在將 GEMS 從一個傳統的請求-回應模式應用，轉變為一個擁有本地數據快取的、響應極速的前端應用，以大幅提升使用者體驗。"
    stories:
      - id: "9.1"
        story: "作為一名使用者，我希望能一次性載入所有專案與產物的元數據到前端，以便在應用程式內進行任何導航或篩選操作時，都能獲得即時的 UI 反應，無需等待後端載入。"
        sourceLog: "產品路線圖.md (史詩 1); Iteration_Closing_Report.yaml (NIC-S4-001)"
        acceptanceCriteria:
          - { id: "AC-9.1-1", description: "應用程式啟動時，會呼叫一次 `initializeAppWithCache()` API，並將返回的完整元數據儲存在一個前端的 JavaScript 物件中。" }
          - { id: "AC-9.1-2", description: "當我點擊「切換專案」下拉選單時，專案列表的切換是即時的，不應觸發任何對後端的 `google.script.run` 呼叫。" }
          - { id: "AC-9.1-3", description: "當我選擇一個專案後，流程圖的渲染是即時的，其所需的產物元數據皆來自前端快取。" }
        requiredTests: # 轉譯自 coreFunctionStrategy
          - type: "Integration Test"
            description: "驗證 `initializeAppWithCache()` 回傳的數據能被前端正確快取。"
          - type: "E2E Test"
            description: "模擬使用者操作，驗證 UI 互動的即時性。"
        relatedFunctions: ["initializeAppWithCache()"]
        affectedDataModels: ["Projects", "Artifacts"]

  - epic: "Epic 10: 核心架構重構 - GitHub 內容後端"
    description: "此史詩旨在將內容儲存與元數據管理分離，引入 GitHub 作為內容資料庫，以實現專業的版本控制並提升系統的擴展性。"
    stories:
      - id: "10.1"
        story: "作為一名系統維護者，我希望能執行一個一次性的遷移腳本，將所有儲存在 Google Sheets `raw_content` 欄位中的產物內容，安全地遷移至指定的 GitHub Repository，以便完成數據儲存的架構分離。"
        sourceLog: "產品路線圖.md (史詩 2); Iteration_Closing_Report.yaml (NIC-S4-002)"
        acceptanceCriteria:
          - { id: "AC-10.1-1", description: "一個名為 `migrateContentToGitHub` 的後端函式被建立。" }
          - { id: "AC-10.1-2", description: "手動執行此函式後，`Artifacts` 表中所有原先有 `raw_content` 的行，其 `github_file_url` 和 `github_commit_hash` 欄位都被成功填充。" }
          - { id: "AC-10.1-3", description: "隨機抽樣檢查，確認 Sheets 中的 URL 能連結到 GitHub 上對應的檔案，且內容完全一致。" }
        requiredTests: # 轉譯自 coreFunctionStrategy
          - type: "Integration Test"
            description: "在測試環境中完整運行遷移腳本，驗證其正確性與冪等性。"
        relatedFunctions: ["migrateContentToGitHub()"]
        affectedDataModels: ["Artifacts"]
      - id: "10.2"
        story: "作為一名使用者，當我點擊流程圖中的一個節點時，我希望能從 GitHub 無縫地載入並看到該產物的最新內容，以便我能查閱詳細資訊。"
        sourceLog: "產品路線圖.md (史詩 2)"
        acceptanceCriteria:
          - { id: "AC-10.2-1", description: "當使用者點擊一個節點時，前端會呼叫 `getArtifactContent(artifactId)` API。" }
          - { id: "AC-10.2-2", description: "文件內容被成功返回並顯示在前端的內容區域。" }
          - { id: "AC-10.2-3", description: "如果 GitHub 檔案不存在或無法存取，前端會顯示一個清晰的錯誤訊息。" }
        requiredTests: # 轉譯自 coreFunctionStrategy
          - type: "Integration Test"
            description: "測試 `getArtifactContent` 的端到端流程。"
        relatedFunctions: ["getArtifactContent(artifactId)"]
        affectedDataModels: ["Artifacts"]
      - id: "10.3"
        story: "作為一名使用者，當我上傳或更新一個產物時，我希望能將文件內容安全地儲存到 GitHub，並在 Google Sheets 中更新其索引，以便完成一次完整的產物版本迭代。"
        sourceLog: "產品路線圖.md (史詩 2)"
        acceptanceCriteria:
          - { id: "AC-10.3-1", description: "當使用者儲存產物時，前端會呼叫 `createOrUpdateArtifact(metadata, content)` API。" }
          - { id: "AC-10.3-2", description: "後端成功將 `content` commit 到 GitHub，並將元數據與新的 `commit_hash` 更新到 Google Sheets。" }
          - { id: "AC-10.3-3", description: "如果 GitHub 操作失敗，Google Sheets 不應有任何變更。如果 Sheets 操作失敗，後端必須記錄一筆待修復日誌。" }
        requiredTests: # 轉譯自 coreFunctionStrategy
          - type: "Integration Test"
            description: "測試 `createOrUpdateArtifact` 的事務性，特別是失敗路徑。"
        relatedFunctions: ["createOrUpdateArtifact(metadata, content)"]
        affectedDataModels: ["Artifacts"]

