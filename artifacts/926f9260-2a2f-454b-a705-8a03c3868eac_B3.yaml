# ===================================================================
# GEMS - MVP Blueprint v4.0
# ===================================================================
# Iteration: 2
# Focus: 核心技術整合與前端架構重構 (Core Tech Integration & Frontend Refactoring)
# ===================================================================

projectInfo:
  projectName: "GEMS - 視覺化敏捷流程管理工具"
  executiveSummary: "一個基於 Google Apps Script 和 Google Sheets 的輕量級網頁應用，旨在將定義好的敏捷開發流程視覺化。它透過互動式流程圖來管理各階段產出的 YAML 文件，提供團隊一個清晰、集中且可追溯的專案儀表板。"
  sprintGoal: "完成與 GitHub API 的核心整合，實現產物的版本控制與同步，並重構前端 SVG 渲染邏輯以償還技術債，提升系統的長期穩定性。"

technicalConsiderations:
  platforms: "網頁應用，主要透過桌面瀏覽器訪問。"
  technologyPreferences: "後端使用 Google Apps Script，資料庫使用 Google Sheets，前端使用 HTML Service 搭配 JavaScript/CSS。"
  integrationNeeds: "需要與 GitHub REST API 進行穩定的後端整合。"

constraintsAndRisks:
  constraints: "需在 Google Apps Script 的執行時間與效能限制下運作。"
  risks:
    - "風險一: 隨著專案與產物數量增長，Google Sheets 作為資料庫可能遇到讀寫效能瓶頸。"
    - "風險二: 外部 API (GitHub) 的穩定性與網路延遲，可能影響產物同步的成功率與使用者體驗。"
    - "風險三: GitHub API 的認證權杖需要被安全地儲存與管理。"

architecture:
  highLevelArchitecture:
    architecturalStyle: "採用 Google Apps Script 作為後端的 Serverless Web App 架構。"
    systemDiagram: |
      graph TD;
          A[使用者瀏覽器] --> B[HTML Service (UI)];
          B -- Client-side JS --> C{Google Apps Script (Server-side)};
          C -- SpreadsheetApp --> D[Google Sheets (Database)];
          C -- UrlFetchApp --> E[GitHub API];
    frontendBackendIntegration: "前端透過 `google.script.run` 呼叫後端的 Apps Script 函式，進行資料的讀寫與外部服務的觸發。"
  techStack:
    - category: "Backend Runtime"
      technology: "Google Apps Script"
      reason: "無伺服器、與 G Suite 無縫整合、低成本快速啟動。"
    - category: "Database"
      technology: "Google Sheets"
      reason: "適合作為 MVP 階段的輕量級資料庫，直觀易於管理。"
    - category: "Frontend"
      technology: "HTML Service (HTML/CSS/JS)"
      reason: "Google Apps Script 內建的網頁託管服務。"
    - category: "Diagram Rendering"
      technology: "Inline SVG"
      reason: "[As-Built from Sprint 1] 已驗證在 GAS 環境中比第三方函式庫更穩健。"
    - category: "External Services"
      technology: "GitHub API"
      reason: "用於實現產物的版本控制與程式碼同步。"
  dataModels:
    - modelName: "Projects"
      description: "儲存專案的清單與基本資訊。"
      fields:
        project_id: "string (Primary Key)"
        project_name: "string"
        status: "string"
        created_at: "Timestamp"
    - modelName: "Artifacts"
      description: "儲存所有上傳的產物（YAML 文件）及其元數據。"
      fields:
        artifact_id: "string (Primary Key)"
        project_id: "string (Foreign Key)"
        node_id: "string"
        artifact_type: "string"
        related_artifact_id: "string"
        status: "string"
        version: "string"
        key_info_1: "string"
        key_info_2: "string"
        raw_content: "string (Full YAML text)"
        github_file_url: "string"
        github_commit_hash: "string"
        created_at: "Timestamp"

requirements:
  inScope:
    - id: "FR6"
      description: "系統後端能夠使用預設的配置（API Token, Repo, Branch），透過 UrlFetchApp 服務向 GitHub API 發送請求。"
    - id: "FR7"
      description: "當使用者上傳一份 YAML 產物後，其內容會被成功地 commit 並 push到指定的 GitHub Repo 的指定路徑下。"
    - id: "FR8"
      description: "在成功 push 到 GitHub 後，對應的回應（包含 commit hash 和檔案 URL）會被解析並儲存回 Google Sheets 中 `Artifacts` 工作表的相應欄位。"
    - id: "FR9"
      description: "前端的 SVG 流程圖渲染邏輯，被從主 UI 腳本中分離出來，封裝成一個獨立、可複用的函式或元件。"
  outOfScope:
    - "YAML 內容的智慧摘要與解析功能。"
    - "浮動『創意牆』功能。"
    - "節點根據狀態『亮燈』的動態視覺效果。"
    - "多 GitHub Repo 或多分支的動態配置功能。"
  nonFunctional:
    - id: "NFR3"
      description: "對 GitHub API 的呼叫操作應有 10 秒的超時限制，並有基本的錯誤處理機制。"
    - id: "NFR4"
      description: "SVG 元件化重構後，前端頁面的載入時間與互動效能不應有可感知的下降。"

epicsAndStories:
  - epic: "Epic 3: 核心技術整合與版本控制"
    stories:
      - id: "3.1"
        story: "作為一個開發者，我希望在我上傳產物後，系統能自動將該文件同步到指定的 GitHub Repo，以便讓文件與程式碼的版本保持一致。"
        acceptanceCriteria:
          - id: "AC-3.1-1"
            description: "當一份 YAML 檔案被成功儲存到 Google Sheet 後，一個後端函式會被觸發，以啟動 GitHub 同步流程。"
          - id: "AC-3.1-2"
            description: "後端 Apps Script 中有一個安全的配置區塊，用於存放 GitHub API Token, Repo 名稱, 分支名稱, 以及目標檔案路徑。"
          - id: "AC-3.1-3"
            description: "在 GitHub 的目標 Repo 中，可以查看到一個新的 commit，其內容與上傳的 YAML 文件完全相符。"
      - id: "3.2"
        story: "作為一個系統，在成功將產物推送到 GitHub 後，我需要記錄下版本控制資訊，以便在 GEMS 內部建立產物與程式碼倉儲之間的追溯連結。"
        acceptanceCriteria:
          - id: "AC-3.2-1"
            description: "後端函式能成功解析 GitHub API 的成功回應，並從中提取出 commit hash 和檔案的 blob URL。"
          - id: "AC-3.2-2"
            description: "在 `Artifacts` 工作表中，對應的產物紀錄列，其 `github_commit_hash` 與 `github_file_url` 欄位被成功更新。"
  - epic: "Epic 4: 前端架構健壯性提升"
    stories:
      - id: "4.1"
        story: "作為一個開發者，我想要將目前寫死在主程式碼中的 SVG 渲染邏輯，重構成一個可複用的元件，以提高程式碼的可維護性並為未來的圖表功能做準備。"
        sourceLog: "Iteration 1 Closing Report (NIC-S1-002)"
        acceptanceCriteria:
          - id: "AC-4.1-1"
            description: "程式碼庫中存在一個獨立的函式（例如 `renderProcessDiagram(nodes, links)`），它能接收節點與連結資料作為輸入，並回傳一個完整的 SVG 字串。"
          - id: "AC-4.1-2"
            description: "前端主邏輯透過呼叫此函式來渲染流程圖，而不是在自身內部包含大量的 SVG 標籤生成程式碼。"
          - id: "AC-4.1-3"
            description: "[無迴歸測試] 重構後，流程圖的視覺外觀、節點位置、以及點擊節點觸發右側面板更新的行為，必須與第一次迭代結束時的狀態完全相同。"
