# ===================================================================
# GEMS Sprint Plan: Sprint 7
# 來源: mvp_blueprint_v3.yaml (無損轉譯)
# ===================================================================
projectId: "GEMS - 視覺化敏捷流程管理工具"
sprintId: 7
sprintGoal: "從『可靠』邁向『賦能』。交付產物版本歷史檢視器、支援多種語法的節點內內容貼上，以及 AI 角色連結功能，為使用者提供更強大、更便捷的價值。"
version: "7.2"
status: "Approved"

# ===================================================================
# Foundational Architecture & Principles (基礎架構與原則)
# CRITICAL: 此區塊完整複製自 mvp_blueprint_v3.yaml，作為本衝刺的最高指導原則。
# ===================================================================
foundationalArchitecture:
  highLevelArchitecture:
    architecturalStyle: "具備前端狀態的 Serverless Web App with GitHub Backend"
    architecturalPrinciples:
      - principle: "狀態前移 (Stateful Frontend, Stateless Backend)"
        description: "將 UI 狀態（如當前檢視的產物、版本）移至前端 `appDataCache` 管理，後端專注於無狀態的數據 CRUD 操作。前端透過增量更新機制與後端同步狀態。"
      - principle: "索引與內容分離 (Index-Content Separation)"
        description: "嚴格區分元數據索引（儲存於 Google Sheets）與文件內容（儲存於 GitHub）。所有操作都遵循此原則，確保架構清晰。"
      - principle: "模組化與關注點分離 (Modularity and Separation of Concerns)"
        description: "後端程式碼依職責拆分為獨立的服務模組 (`GitHubService.gs`, `SheetService.gs`)，前端資源 (CSS, JS) 也進行了分離，以降低耦合度、提升可維護性。"
    systemDiagram: |
      graph TD;
          A[使用者瀏覽器-含快取層] --> B[HTML Service (Stateful UI)];
          B -- google.script.run --> C{Google Apps Script (Stateless Server)};
          C -- SpreadsheetApp API --> D[Google Sheets (Metadata Index)];
          C -- UrlFetchApp (GitHub API) --> E[GitHub API v3 (Content Store)];
          C -- PropertiesService API --> F[Script Properties (Credentials)];
          
          subgraph "既有核心機制"
              G[appDataCache] <--> B;
              H[GitHub Webhook] -- HTTPS POST --> C;
          end

          subgraph "Iteration 7 Enhancements"
              B -- "1. 選擇版本" --> I(版本選擇器 UI);
              I -- "2. 請求歷史內容(commit_hash)" --> C;
              C -- "3. getFileContentByHash()" --> E;
              B -- "4. 貼上內容(YAML/GS/HTML)" --> J(內容輸入 Textarea);
              J -- "5. createOrUpdateArtifact()" --> C;
          end

  techStack:
    - category: "Frontend State Management"
      technology: "In-memory JavaScript Object (appDataCache)"
      reason: "持續作為前端狀態管理的核心。本次迭代將擴充其數據結構，以儲存當前選定的產物版本資訊。"
    - category: "Backend Runtime"
      technology: "Google Apps Script (V8 Runtime)"
      reason: "核心後端運行環境。本次迭代將在既有的模組化結構上，擴充 `GitHubService.gs` 與 `SheetService.gs` 的功能。"
    - category: "Database"
      technology: "Google Sheets"
      reason: "持續作為元數據索引。`Artifacts` 表的結構將保持穩定，但其數據將被新功能更頻繁地讀取。"
    - category: "Content Store"
      technology: "GitHub Repository (via REST API v3)"
      reason: "作為內容儲存的核心。本次將深度利用其 commit 歷史，以實現版本追溯功能。"
    - category: "Backend Integration"
      technology: "Google Apps Script Web App"
      reason: "持續作為接收 GitHub Webhook 的端點，確保數據自動同步機制的正常運作。"
    - category: "Performance & Resilience"
      technology: "GitHub API Rate Limiting Control (via GitHubService)"
      reason: "所有對 GitHub API 的新請求（如獲取歷史版本），都必須透過既有的 `GitHubService.fetch` 函式進行，以繼承其快取與指數退避重試 logique，保障系統韌性。"

  dataModels:
    - modelName: "Projects"
      status: "STABLE"
      description: "儲存專案的基本資訊，本次迭代不進行結構變更。"
      fields:
        - { name: "project_id", type: "string (Primary Key)" }
        - { name: "project_name", type: "string" }
        - { name: "status", type: "string" }
        - { name: "created_at", type: "Timestamp" }
    - modelName: "Artifacts"
      status: "STABLE"
      description: "儲存所有產物的元數據索引。其 `github_commit_hash` 與 `version` 欄位將是版本歷史檢視功能的關鍵數據來源。本次迭代不進行結構變更。"
      fields:
        - { name: "artifact_id", type: "string (Primary Key)" }
        - { name: "project_id", type: "string (Foreign Key)" }
        - { name: "node_id", type: "string" }
        - { name: "artifact_type", type: "string" }
        - { name: "version", type: "string" }
        - { name: "github_commit_hash", type: "string (ACTIVE)" }
        - { name: "github_file_url", type: "string (ACTIVE)" }
        - { name: "created_at", type: "Timestamp" }
    - modelName: "Ideas"
      status: "STABLE"
      description: "儲存專案的想法與筆記，本次迭代不進行結構變更。"
      fields:
        - { name: "idea_id", type: "string (Primary Key)" }
        - { name: "project_id", type: "string (Foreign Key)" }
        - { name: "content", type: "string" }
  codebaseStructure:
    summary: "程式碼庫已從單體檔案結構，重構為職責清晰的模組化結構。此為根據最新盤點的正確分類。"
    files:
      - name: "Main.gs"
        description: "應用程式主入口與工具函式。包含 doGet(), initializeAppWithData(), getRoleToFileMap(), parseIterationReport() 及全域常數定義。"
      - name: "DataModel.gs"
        description: "業務邏輯層，處理核心數據模型操作，如 createNewProject(), createOrUpdateArtifact(), getIdeas() 等。"
      - name: "GitHubService.gs"
        description: "GitHub API 互動層，封裝所有 GitHub 相關操作，如 GitHubService 物件 (含 fetch, clearCache), syncToGitHub() 等。"
      - name: "SheetService.gs"
        description: "Google Sheets 數據層，封裝所有直接操作 SpreadsheetApp 的函式，如 getColumnIndex(), _updateIdeasCache() 等。"
      - name: "Index.html"
        description: "前端主頁面框架，透過 `include` 機制載入樣式與腳本。"
      - name: "Stylesheet.html"
        description: "包含應用程式的所有 CSS 樣式。"
      - name: "ClientScript.html"
        description: "包含所有前端 JavaScript 邏輯。"
      - name: "testrunner.gs"
        description: "包含針對後端服務的單元測試腳本。"

# ===================================================================
# Stories & Tasks for Sprint 7
# ===================================================================
stories:
  - storyId: "14.1"
    storyTitle: "作為一名專案經理，當我審核一份產物時，我希望能看到一個清晰的版本歷史列表，以便我能快速了解這份文件的所有變更紀錄。"
    technicalBrief: "開發後端函式以從 GitHub API 獲取 commit 歷史，並在前端動態渲染出一個版本歷史列表 UI。"
    technicalContext:
      riskLevel: "P1 (High)"
      relatedNFR:
        - id: "NFR13"
          description: "版本歷史內容的載入時間應在 3 秒內完成。"
      architecture:
        - component: "getVersionHistory(artifactId)"
          strategy: "後端 `SheetService.gs` 函式。接收產物 ID，查詢 GitHub API 取得該檔案的所有 commit 歷史，回傳一個包含版本號、commit hash、提交者、日期的列表。"
        - component: "Frontend: renderVersionHistoryViewer(historyData)"
          strategy: "前端函式。接收來自後端的版本歷史列表，動態生成一個 UI 元件（如下拉選單），並為每個選項綁定事件監聽器，以便在使用者選擇後觸發 `getArtifactContentByHash`。"
      affectedDataModels: ["Artifacts"]
    acceptanceCriteria:
      - { id: "AC-14.1-1", description: "在產物檢視介面旁，有一個『版本歷史』按鈕或圖示。" }
      - { id: "AC-14.1-2", description: "點擊後，前端會呼叫後端 `getVersionHistory` 函式，並在 UI 上以列表形式顯示回傳的版本號、提交者與提交日期。" }
      - { id: "AC-14.1-3", description: "該列表應以降序（最新版本在上）排列。" }
    requiredTests:
      - { type: "Unit Test", description: "模擬 GitHub API 回應，驗證 `getVersionHistory` 函式能正確解析並格式化版本歷史列表。" }
      - { type: "Integration Test", description: "對一個真實的產物進行端對端測試，確保能從 GitHub 成功拉取並回傳其版本歷史。" }
      - { type: "UI Test (Manual)", description: "驗證版本選擇器能正確顯示，且選擇不同版本後，內容顯示區能正確更新。" }
    tasks:
      - taskId: "14.1-T1"
        type: "Backend"
        description: "[SheetService.gs] 開發：實作 `getVersionHistory(artifactId)` 函式，此函式將調用 GitHubService 以獲取指定檔案的 commits。"
        fulfills: ["AC-14.1-2"]
      - taskId: "14.1-T2"
        type: "Frontend"
        description: "[ClientScript.html] 開發：在產物檢視區塊新增『版本歷史』按鈕，並綁定點擊事件。"
        fulfills: ["AC-14.1-1"]
      - taskId: "14.1-T3"
        type: "Frontend"
        description: "[ClientScript.html] 開發：實作 `renderVersionHistoryViewer` 函式，用於接收後端數據並動態生成版本列表 UI，確保其以降序排列。"
        fulfills: ["AC-14.1-2", "AC-14.1-3"]
      - taskId: "14.1-T4"
        type: "QA"
        description: "測試：執行端對端測試，點擊按鈕，驗證版本列表是否正確、完整且按時間倒序顯示。"
        fulfills: ["AC-14.1-1", "AC-14.1-2", "AC-14.1-3"]

  - storyId: "14.2"
    storyTitle: "作為一名專案經理，在看到版本歷史列表後，我希望能點選其中任一版本，並立即檢視該版本的完整內容，以便我能對比不同階段的產出。"
    technicalBrief: "開發後端函式以依據 commit hash 獲取特定版本的檔案內容，並更新前端 UI 以顯示該內容。"
    technicalContext:
      riskLevel: "P0 (Critical)"
      relatedNFR:
        - id: "NFR13"
          description: "版本歷史內容的載入時間應在 3 秒內完成。"
      architecture:
        - component: "getArtifactContentByHash(filePath, commitHash)"
          strategy: "後端 `GitHubService.gs` 函式。接收檔案路徑與 commit hash，呼叫 GitHub API 的 `Get contents` 端點，並帶上 `ref` 參數，以獲取特定版本的檔案內容。"
      affectedDataModels: ["Artifacts"]
    acceptanceCriteria:
      - { id: "AC-14.2-1", description: "版本歷史列表中的每個項目都是可點擊的。" }
      - { id: "AC-14.2-2", description: "點擊一個歷史版本後，前端會帶著 `commitHash` 呼叫後端 `getArtifactContentByHash` 函式。" }
      - { id: "AC-14.2-3", description: "主要的內容顯示區域會被成功更新為所選歷史版本的內容，並有明確的視覺提示（如『您正在檢視版本 v1.2』）。" }
    requiredTests:
      - { type: "Unit Test", description: "驗證 `getArtifactContentByHash` 函式能正確建構帶有 `ref` 參數的 API 請求 URL。" }
      - { type: "Integration Test", description: "對一個真實的歷史 commit 進行端對端測試，驗證能成功獲取正確的檔案內容。" }
    tasks:
      - taskId: "14.2-T1"
        type: "Backend"
        description: "[GitHubService.gs] 開發：實作 `getArtifactContentByHash(filePath, commitHash)` 函式。"
        fulfills: ["AC-14.2-2"]
      - taskId: "14.2-T2"
        type: "Frontend"
        description: "[ClientScript.html] 開發：為版本歷史列表的項目添加點擊事件監聽器，觸發對 `getArtifactContentByHash` 的呼叫。"
        fulfills: ["AC-14.2-1", "AC-14.2-2"]
      - taskId: "14.2-T3"
        type: "Frontend"
        description: "[ClientScript.html] 開發：更新UI邏輯，將獲取到的歷史內容顯示在主內容區，並添加明確的視覺狀態提示。"
        fulfills: ["AC-14.2-3"]
      - taskId: "14.2-T4"
        type: "QA"
        description: "測試：點擊不同的歷史版本，驗證主內容區是否正確更新，且視覺提示是否清晰可見。"
        fulfills: ["AC-14.2-1", "AC-14.2-2", "AC-14.2-3"]

  - storyId: "15.1"
    storyTitle: "作為一名開發者，我希望能直接在流程圖節點上貼上我的 YAML、Google Apps Script (.gs) 或 HTML 內容，並指定其類型，而無需先在本機建立檔案再上傳，以極大加速我的工作流程。"
    technicalBrief: "建立一個前端模態視窗用於貼上內容，並改造後端 `createOrUpdateArtifact` 函式以接收純文字內容並在 GitHub 建立檔案。"
    technicalContext:
      riskLevel: "P1 (High)"
      relatedNFR: []
      architecture:
        - component: "Frontend: showPasteInputModal(nodeId)"
          strategy: "前端函式。當使用者觸發『貼上內容』時，顯示一個包含 `<textarea>` 的模態視窗，並提供選項讓使用者指定內容類型（yaml, gs, html）。點擊儲存後，將內容與類型傳遞給後端 `createOrUpdateArtifact` 函式。"
      affectedDataModels: ["Artifacts"]
    acceptanceCriteria:
      - { id: "AC-15.1-1", description: "在節點的操作選單中，有一個『貼上內容』的選項。" }
      - { id: "AC-15.1-2", description: "點擊後會彈出一個模態視窗，包含一個大型文字輸入區和一個下拉選單，用於選擇內容類型 (預設為 YAML)。" }
      - { id: "AC-15.1-3", description: "成功提交後，後端 `createOrUpdateArtifact` 能正確處理傳入的文字內容與類型，並在 GitHub 上建立對應的檔案（如 `artifact-123.gs`）。" }
    requiredTests:
      - { type: "UI Test (Manual)", description: "驗證模態視窗能正常彈出與關閉，且能成功將不同類型的內容提交至後端。" }
      - { type: "Regression Test", description: "確保新的提交方式不會影響既有的檔案上傳功能。" }
    tasks:
      - taskId: "15.1-T1"
        type: "Frontend"
        description: "[ClientScript.html] 開發：在節點操作選單中新增『貼上內容』選項，並實作 `showPasteInputModal` 函式以彈出模態視窗。"
        fulfills: ["AC-15.1-1", "AC-15.1-2"]
      - taskId: "15.1-T2"
        type: "Backend"
        description: "[DataModel.gs] 重構：修改 `createOrUpdateArtifact` 函式，使其能接收純文字內容和檔案類型作為參數，並據此在 GitHub 上建立或更新檔案。"
        fulfills: ["AC-15.1-3"]
      - taskId: "15.1-T3"
        type: "Integration"
        description: "整合：將前端模態視窗的儲存按鈕與 `DataModel.gs` 中的 `createOrUpdateArtifact` 函式對接。"
        fulfills: ["AC-15.1-3"]
      - taskId: "15.1-T4"
        type: "QA"
        description: "測試：分別使用 YAML, .gs, .html 內容進行貼上並儲存，確認 GitHub 上生成了正確的檔案，並執行迴歸測試確保檔案上傳功能正常。"
        fulfills: ["AC-15.1-3"]

  - storyId: "15.2"
    storyTitle: "作為一個團隊成員，我希望在流程圖的角色節點上，能直接點擊一個圖示連結，就能在新分頁快速開啟一個預設好的 AI 提示詞網頁（如 Poe, ChatGPT），以便我能立即開始扮演該角色並產出文件。"
    technicalBrief: "修改 Mermaid.js 的前端渲染邏輯，為特定節點類型添加一個可點擊的外部連結圖示。"
    technicalContext:
      riskLevel: "P2 (Medium)"
      relatedNFR: []
      architecture:
        - component: "Frontend: updateMermaidRenderingLogic()"
          strategy: "此為前端渲染邏輯的修改，非獨立函式。目標是擴充現有的 Mermaid.js 渲染流程，解析節點定義中的新連結屬性，並在 SVG 輸出中疊加一個可點擊的圖示元素。"
      affectedDataModels: []
    acceptanceCriteria:
      - { id: "AC-15.2-1", description: "在 Mermaid.js 的節點定義中，可以為特定類型的節點增加一個可點擊的外部連結屬性。" }
      - { id: "AC-15.2-2", description: "當滑鼠懸停在角色節點上時，會出現一個清晰可辨的『AI 助手』圖示。" }
      - { id: "AC-15.2-3", description: "點擊該圖示後，會在新的瀏覽器分頁中打開一個可由使用者在設定檔中配置的 URL。" }
    requiredTests: [] # From blueprint
    tasks:
      - taskId: "15.2-T1"
        type: "Frontend"
        description: "[ClientScript.html] 研究：確定在 Mermaid.js 中為節點添加外部連結的最佳實作方式（例如，使用 click 事件或修改節點文字）。"
        fulfills: ["AC-15.2-1"]
      - taskId: "15.2-T2"
        type: "Frontend"
        description: "[ClientScript.html] 開發：修改前端渲染邏輯，為指定的角色節點動態添加一個帶有外部連結的『AI 助手』圖示。"
        fulfills: ["AC-15.2-2"]
      - taskId: "15.2-T3"
        type: "Backend"
        description: "[Main.gs] 開發：提供一個後端配置（如全域常數或 PropertiesService），允許管理者設定 AI 助手連結的目標 URL。"
        fulfills: ["AC-15.2-3"]
      - taskId: "15.2-T4"
        type: "QA"
        description: "測試：手動驗證在角色節點上懸停時圖示出現，點擊後能在新分頁開啟正確的 URL。"
        fulfills: ["AC-15.2-2", "AC-15.2-3"]

  - storyId: "16.1"
    storyTitle: "作為一名系統維護者，我需要為第六次迭代中重構的核心服務（GitHubService, SheetService）以及本次迭代新增的後端邏輯，建立一套全面的單元測試，以確保未來的變更不會意外破壞現有功能。"
    technicalBrief: "在 Google Apps Script 中使用函式庫或自訂框架，為後端服務層的公開函式編寫包含成功與失敗情境的單元測試。"
    technicalContext:
      riskLevel: "P1 (High)"
      relatedNFR:
        - id: "NFR14"
          description: "新建立的後端服務函式必須包含 JSDoc 格式的註解。"
        - id: "NFR15"
          description: "必須為 `GitHubService.gs` 和 `SheetService.gs` 撰寫並擴充單元測試，確保程式碼覆蓋率不低於第六次迭代結束時的水平。"
      architecture:
        - component: "Unit Testing"
          strategy: "在 Google Apps Script 專案中建立一個專用的 `testrunner.gs` 或類似檔案，用於編寫和執行所有單元測試。測試案例將使用 Mock 物件來模擬外部依賴（如 `UrlFetchApp`, `SpreadsheetApp`），以確保測試的獨立性與速度。"
      affectedDataModels: []
    acceptanceCriteria:
      - { id: "AC-16.1-1", description: "在 `testrunner.gs` 檔案中，為 `GitHubService.gs` 的所有公開函式（如 `fetch`, `getArtifactContentByHash`）建立對應的測試案例。" }
      - { id: "AC-16.1-2", description: "為 `SheetService.gs` 的所有公開函式（如 `getVersionHistory`）建立對應的測試案例。" }
      - { id: "AC-16.1-3", description: "所有測試案例都應包含成功與失敗（如模擬 API 錯誤）的情境，並能獨立運行。" }
    requiredTests: [] # Testing the tests is meta
    tasks:
      - taskId: "16.1-T1"
        type: "Backend"
        description: "[testrunner.gs] 開發：為 `GitHubService.gs` 中的 `fetch`, `getArtifactContentByHash` 等函式編寫單元測試，包含 Mock API 的成功與失敗回傳。"
        fulfills: ["AC-16.1-1", "AC-16.1-3"]
      - taskId: "16.1-T2"
        type: "Backend"
        description: "[testrunner.gs] 開發：為 `SheetService.gs` 中的 `getVersionHistory` 等函式編寫單元測試，包含 Mock API 的成功與失敗回傳。"
        fulfills: ["AC-16.1-2", "AC-16.1-3"]
      - taskId: "16.1-T3"
        type: "Backend"
        description: "文件：確保所有被測試的新函式 (`GitHubService.gs`, `SheetService.gs`) 都有符合 NFR14 的 JSDoc 註解。"
        fulfills: []
      - taskId: "16.1-T4"
        type: "QA"
        description: "執行：從 Apps Script 編輯器運行 `testrunner.gs` 中的所有單元測試，確保它們都能成功通過。"
        fulfills: ["AC-16.1-1", "AC-16.1-2", "AC-16.1-3"]

