/**
 * @OnlyCurrentDoc
 */

// --- 全域設定 (Global Settings) ---
const SPREADSHEET_ID = "1uuW8GuRJb5BCW-y156IQhmr-IV7EAR2O46mcUwSLvDA";
const PROJECTS_SHEET_NAME = "Projects";
const ARTIFACTS_SHEET_NAME = "Artifacts";

// --- Sprint 1 & 2: 既有函式 ---

function doGet(e) {
  return HtmlService.createHtmlOutputFromFile('Index.html')
      .setTitle("GEMS 專案管理工具")
      .addMetaTag('viewport', 'width=device-width, initial-scale=1.0');
}

function createNewProject(projectName) {
  try {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(PROJECTS_SHEET_NAME);
    if (!sheet) throw new Error(`工作表 "${PROJECTS_SHEET_NAME}" 不存在。`);
    sheet.appendRow([ Utilities.getUuid(), projectName, new Date() ]);
    return { status: 'success', message: `專案 "${projectName}" 已成功建立！` };
  } catch (error) {
    Logger.log(error);
    return { status: 'error', message: error.message };
  }
}

function getArtifactContent(nodeId) {
  try {
    const artifactsSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(ARTIFACTS_SHEET_NAME);
    if (!artifactsSheet) throw new Error(`工作表 "${ARTIFACTS_SHEET_NAME}" 不存在。`);

    const data = artifactsSheet.getDataRange().getValues();
    for (let i = data.length - 1; i >= 1; i--) {
      const row = data[i];
      if (row[2] === nodeId) { // node_id 在第 3 欄 (index 2)
        return { status: 'found', content: row[3] }; // raw_content 在第 4 欄 (index 3)
      }
    }
    
    return { status: 'not_found', message: `找不到節點 ${nodeId} 的產出物。` };
  } catch (error) {
    Logger.log(error);
    return { status: 'error', message: error.message };
  }
}


// --- Sprint 2: 核心功能 ---

/**
 * 接收前端上傳的檔案內容，儲存至 Google Sheet 並同步到 GitHub。
 * 【Story 3.2 更新】: 新增回填 GitHub commit 資訊的邏輯。
 * @param {string} fileContent - 檔案的文字內容。
 * @param {string} nodeId - 觸發上傳的流程圖節點 ID。
 * @returns {object} 一個包含執行狀態與訊息的物件。
 */
function uploadFileContent(fileContent, nodeId) {
  try {
    // 步驟 1: 將產出物儲存到 Google Sheet
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const artifactsSheet = ss.getSheetByName(ARTIFACTS_SHEET_NAME);
    const projectsSheet = ss.getSheetByName(PROJECTS_SHEET_NAME);
    if (!artifactsSheet) throw new Error(`工作表 "${ARTIFACTS_SHEET_NAME}" 不存在。`);
    if (!projectsSheet) throw new Error(`工作表 "${PROJECTS_SHEET_NAME}" 不存在。`);

    const projectData = projectsSheet.getRange(2, 1, 1, 1).getValue();
    if (!projectData) throw new Error("找不到任何專案。請先建立一個專案。");
    const projectId = projectData;

    artifactsSheet.appendRow([
      Utilities.getUuid(),
      projectId,
      nodeId,
      fileContent,
      new Date(),
      '', // 預留 github_commit_hash
      ''  // 預留 github_file_url
    ]);
    const lastRow = artifactsSheet.getLastRow();
    Logger.log(`產出物已儲存至節點 ${nodeId}，位於工作表第 ${lastRow} 列。`);

    // 步驟 2: 觸發 GitHub 同步流程
    const githubResponse = syncToGitHub(nodeId, fileContent);

    if (githubResponse.status === 'error') {
       throw new Error(`GitHub 同步失敗: ${githubResponse.message}`);
    }

    // 【Story 3.2 新增】 步驟 3: 回填 GitHub 資訊 (Task 3.2-T1, 3.2-T2)
    if (githubResponse.data && githubResponse.data.commit && githubResponse.data.content) {
      const commitSha = githubResponse.data.commit.sha;
      const fileUrl = githubResponse.data.content.html_url;

      artifactsSheet.getRange(lastRow, 6).setValue(commitSha);      // 更新 github_commit_hash (F欄)
      artifactsSheet.getRange(lastRow, 7).setValue(fileUrl);       // 更新 github_file_url (G欄)
      Logger.log(`已成功回填 GitHub 資訊至第 ${lastRow} 列。`);
    }

    return {
      status: 'success',
      message: '檔案已成功儲存並同步至 GitHub，版本資訊已記錄。',
      githubResponse: githubResponse
    };

  } catch (error) {
    Logger.log('uploadFileContent Error: ' + error.toString());
    return {
      status: 'error',
      message: '處理請求時發生錯誤: ' + error.toString()
    };
  }
}

/**
 * 核心函式：將指定的檔案內容同步到 GitHub Repo。
 */
function syncToGitHub(nodeId, fileContent) {
  try {
    const props = PropertiesService.getScriptProperties();
    const GITHUB_TOKEN = props.getProperty('GITHUB_TOKEN');
    const GITHUB_REPO = props.getProperty('GITHUB_REPO');
    const GITHUB_BRANCH = props.getProperty('GITHUB_BRANCH');

    if (!GITHUB_TOKEN || !GITHUB_REPO || !GITHUB_BRANCH) {
      throw new Error("GitHub 的配置不完整。請先執行 setupGitHubConfig 函式進行設定。");
    }

    const fileName = `${nodeId}.yaml`;
    const path = `artifacts/${fileName}`;
    const apiUrl = `https://api.github.com/repos/${GITHUB_REPO}/contents/${path}`;
    const commitMessage = `docs: 自動同步產出物 ${fileName}`;
    const encodedContent = Utilities.base64Encode(fileContent, Utilities.Charset.UTF_8);

    const payload = {
      message: commitMessage,
      content: encodedContent,
      branch: GITHUB_BRANCH
    };

    let sha = null;
    try {
      const getFileResponse = UrlFetchApp.fetch(apiUrl, {
        method: 'get',
        headers: { 'Authorization': `token ${GITHUB_TOKEN}`, 'Accept': 'application/vnd.github.v3+json' },
        muteHttpExceptions: true
      });
      if (getFileResponse.getResponseCode() == 200) {
        sha = JSON.parse(getFileResponse.getContentText()).sha;
        payload.sha = sha;
      }
    } catch (e) { /* 忽略錯誤，表示是新檔案 */ }

    const options = {
      method: 'put',
      headers: { 'Authorization': `token ${GITHUB_TOKEN}`, 'Accept': 'application/vnd.github.v3+json' },
      contentType: 'application/json',
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };

    const response = UrlFetchApp.fetch(apiUrl, options);
    const responseCode = response.getResponseCode();
    const responseBody = response.getContentText();
    
    if (responseCode === 200 || responseCode === 201) {
      Logger.log('成功同步檔案到 GitHub: ' + path);
      return { status: 'success', message: '成功同步到 GitHub。', data: JSON.parse(responseBody) };
    } else {
      Logger.log(`GitHub API 錯誤 (${responseCode}): ${responseBody}`);
      throw new Error(`GitHub API 錯誤 (${responseCode}): ${responseBody}`);
    }
  } catch (error) {
    Logger.log('syncToGitHub Error: ' + error.toString());
    return { status: 'error', message: error.toString() };
  }
}

/**
 * 設定函式 (僅供開發者/管理員手動執行一次)
 */
function setupGitHubConfig() {
  // 為了您的帳號安全，請不要將您的 Token 直接貼在此處。
  // 此函式僅在需要設定或更新 Token 時，才暫時將 Token 填入並執行一次。
  const GITHUB_TOKEN = 'YOUR_PERSONAL_ACCESS_TOKEN'; // ⚠️ 若需更新，請貼上您的 GitHub Personal Access Token
  const GITHUB_REPO = 'AWEI-73/gems-artifacts';      // ⚠️ 您的 Repo 路徑
  const GITHUB_BRANCH = 'main';                      // ⚠️ 您的主要分支名稱

  if (GITHUB_TOKEN === 'YOUR_PERSONAL_ACCESS_TOKEN' || GITHUB_REPO === 'YOUR_USERNAME/YOUR_REPONAME') {
    throw new Error("請先在此函式中填寫您的 GitHub Token 和 Repo 資訊，然後再執行。");
  }

  PropertiesService.getScriptProperties().setProperties({
    'GITHUB_TOKEN': GITHUB_TOKEN,
    'GITHUB_REPO': GITHUB_REPO,
    'GITHUB_BRANCH': GITHUB_BRANCH
  });

  Logger.log('GitHub 配置已成功儲存。');
}

