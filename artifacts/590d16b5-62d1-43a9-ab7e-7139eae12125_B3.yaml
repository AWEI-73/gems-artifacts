# ===================================================================
# GEMS - MVP Blueprint v3 (Development Ready Plan)
# ===================================================================
# Iteration: 7
# Focus: 使用者賦能與體驗優化 (User Empowerment & Experience Optimization)
# Status: Development Ready
# ===================================================================

projectInfo:
  projectName: "GEMS - 視覺化敏捷流程管理工具"
  executiveSummary: "在第六次迭代成功地將平台提升至『可靠』之後，本次迭代的戰略重心將從後端基礎設施轉向能直接提升使用者工作效率與體驗的前端賦能功能。核心任務是建立產物的版本追溯能力，並全面優化產物的提交與使用工作流。"
  sprintGoal: "從『可靠』邁向『賦能』。交付產物版本歷史檢視器、支援多種語法的節點內內容貼上，以及 AI 角色連結功能，為使用者提供更強大、更便捷的價值。"
  version: "v3.1 (Iteration 7 Planning)"

# --- 商業分析 (Business Analysis - BA Scope) ---
businessAnalysis:
  targetAudience:
    - persona: "Vibe CEO / 專案經理 / 產品負責人"
      needs: "需要一個能完整追溯產物變更歷史的機制，以便進行精確的審核與決策。希望能更方便地將 GEMS 流程與 AI 賦能工具結合，提升團隊的執行效率。"
    - persona: "開發者 / 團隊成員"
      needs: "需要一個更簡化、更直接的產物提交方式，能直接處理程式碼片段，減少工作流程中的摩擦。希望能快速取用與角色相關的 AI 工具，加速產出。"
  successMetrics:
    - id: "SM-7.1"
      metric: "產物提交時間 (Artifact Submission Time)"
      target: "透過『節點內直接貼上』功能，使用者提交一個新產物（從點擊節點到完成儲存）的平均時間應比既有流程（存檔、上傳）縮短 50%。"
    - id: "SM-7.2"
      metric: "版本歷史檢視功能使用率 (Version History View Adoption)"
      target: "在新功能上線後兩週內，至少 70% 的活躍使用者使用過版本歷史檢視功能。"
    - id: "SM-7.3"
      metric: "功能完整性 (Feature Completeness)"
      target: "所有規劃的使用者故事 (User Stories) 及其驗收標準 (Acceptance Criteria) 100% 開發完成並通過測試。"
  coreBusinessValue:
    - value: "強化決策品質 (Enhanced Decision Quality)"
      description: "提供完整的版本追溯能力，讓管理者能基於精確的歷史數據進行審核與決策。"
    - value: "提升工作流效率 (Improved Workflow Efficiency)"
      description: "透過簡化產物提交與整合 AI 工具，直接降低使用者的操作成本，提升日常工作效率。"
    - value: "擴展平台能力 (Expanded Platform Capabilities)"
      description: "將 GEMS 從一個流程管理工具，擴展為一個支援程式碼管理與 AI 賦能的整合性平台。"

# --- 系統架構 (System Architecture - SA Scope) [完整版] ---
architecture:
  highLevelArchitecture:
    architecturalStyle: "具備前端狀態的 Serverless Web App with GitHub Backend"
    architecturalPrinciples:
      - principle: "狀態前移 (Stateful Frontend, Stateless Backend)"
        [cite_start]description: "將 UI 狀態（如當前檢視的產物、版本）移至前端 `appDataCache` 管理，後端專注於無狀態的數據 CRUD 操作。前端透過增量更新機制與後端同步狀態 [cite: 2]。"
      - principle: "索引與內容分離 (Index-Content Separation)"
        [cite_start]description: "嚴格區分元數據索引（儲存於 Google Sheets）與文件內容（儲存於 GitHub）。所有操作都遵循此原則，確保架構清晰 [cite: 2, 3]。"
      - principle: "模組化與關注點分離 (Modularity and Separation of Concerns)"
        [cite_start]description: "後端程式碼依職責拆分為獨立的服務模組 (`GitHubService.gs`, `SheetService.gs`)，前端資源 (CSS, JS) 也進行了分離，以降低耦合度、提升可維護性 [cite: 2, 3]。"
    systemDiagram: |
      graph TD;
          A[使用者瀏覽器-含快取層] --> B[HTML Service (Stateful UI)];
          B -- google.script.run --> C{Google Apps Script (Stateless Server)};
          C -- SpreadsheetApp API --> D[Google Sheets (Metadata Index)];
          C -- UrlFetchApp (GitHub API) --> E[GitHub API v3 (Content Store)];
          C -- PropertiesService API --> F[Script Properties (Credentials)];
          
          subgraph "既有核心機制"
              G[appDataCache] <--> B;
              H[GitHub Webhook] -- HTTPS POST --> C;
          end

          subgraph "Iteration 7 Enhancements"
              B -- "1. 選擇版本" --> I(版本選擇器 UI);
              I -- "2. 請求歷史內容(commit_hash)" --> C;
              C -- "3. getFileContentByHash()" --> E;
              B -- "4. 貼上內容(YAML/GS/HTML)" --> J(內容輸入 Textarea);
              J -- "5. createOrUpdateArtifact()" --> C;
          end


  techStack:
    - category: "Frontend State Management"
      technology: "In-memory JavaScript Object (appDataCache)"
      reason: "持續作為前端狀態管理的核心。本次迭代將擴充其數據結構，以儲存當前選定的產物版本資訊。"
    - category: "Backend Runtime"
      technology: "Google Apps Script (V8 Runtime)"
      [cite_start]reason: "核心後端運行環境。本次迭代將在既有的模組化結構上，擴充 `GitHubService.gs` 與 `SheetService.gs` 的功能 [cite: 2]。"
    - category: "Database"
      technology: "Google Sheets"
      [cite_start]reason: "持續作為元數據索引。`Artifacts` 表的結構將保持穩定，但其數據將被新功能更頻繁地讀取 [cite: 2]。"
    - category: "Content Store"
      technology: "GitHub Repository (via REST API v3)"
      reason: "作為內容儲存的核心。本次將深度利用其 commit 歷史，以實現版本追溯功能。"
    - category: "Backend Integration"
      technology: "Google Apps Script Web App"
      [cite_start]reason: "持續作為接收 GitHub Webhook 的端點，確保數據自動同步機制的正常運作 [cite: 2, 3]。"
    - category: "Performance & Resilience"
      technology: "GitHub API Rate Limiting Control (via GitHubService)"
      [cite_start]reason: "所有對 GitHub API 的新請求（如獲取歷史版本），都必須透過既有的 `GitHubService.fetch` 函式進行，以繼承其快取與指數退避重試邏輯，保障系統韌性 [cite: 2]。"

  dataModels:
    - modelName: "Projects"
      status: "STABLE"
      description: "儲存專案的基本資訊，本次迭代不進行結構變更。"
      fields:
        - { name: "project_id", type: "string (Primary Key)" }
        - { name: "project_name", type: "string" }
        - { name: "status", type: "string" }
        - { name: "created_at", type: "Timestamp" }
    - modelName: "Artifacts"
      status: "STABLE"
      [cite_start]description: "儲存所有產物的元數據索引。其 `github_commit_hash` 與 `version` 欄位將是版本歷史檢視功能的關鍵數據來源。本次迭代不進行結構變更 [cite: 2, 3]。"
      fields:
        - { name: "artifact_id", type: "string (Primary Key)" }
        - { name: "project_id", type: "string (Foreign Key)" }
        - { name: "node_id", type: "string" }
        - { name: "artifact_type", type: "string" }
        - { name: "version", type: "string" }
        - { name: "github_commit_hash", type: "string (ACTIVE)" }
        - { name: "github_file_url", type: "string (ACTIVE)" }
        - { name: "created_at", type: "Timestamp" }
    - modelName: "Ideas"
      status: "STABLE"
      description: "儲存專案的想法與筆記，本次迭代不進行結構變更。"
      fields:
        - { name: "idea_id", type: "string (Primary Key)" }
        - { name: "project_id", type: "string (Foreign Key)" }
        - { name: "content", type: "string" }

  coreFunctionStrategy:
    - function: "getVersionHistory(artifactId)"
      strategy: "後端 `SheetService.gs` 函式。接收產物 ID，查詢 GitHub API 取得該檔案的所有 commit 歷史，回傳一個包含版本號、commit hash、提交者、日期的列表。"
      testingStrategy:
        riskLevel: "P1 (High)"
        requiredTests:
          - { type: "Unit Test", description: "模擬 GitHub API 回應，驗證函式能正確解析並格式化版本歷史列表。" }
          - { type: "Integration Test", description: "對一個真實的產物進行端對端測試，確保能從 GitHub 成功拉取並回傳其版本歷史。" }
    - function: "getArtifactContentByHash(filePath, commitHash)"
      strategy: "後端 `GitHubService.gs` 函式。接收檔案路徑與 commit hash，呼叫 GitHub API 的 `Get contents` 端點，並帶上 `ref` 參數，以獲取特定版本的檔案內容。"
      testingStrategy:
        riskLevel: "P0 (Critical)"
        requiredTests:
          - { type: "Unit Test", description: "驗證函式能正確建構帶有 `ref` 參數的 API 請求 URL。" }
          - { type: "Integration Test", description: "對一個真實的歷史 commit 進行端對端測試，驗證能成功獲取正確的檔案內容。" }
    - function: "Frontend: renderVersionHistoryViewer(historyData)"
      strategy: "前端函式。接收來自後端的版本歷史列表，動態生成一個 UI 元件（如下拉選單），並為每個選項綁定事件監聽器，以便在使用者選擇後觸發 `getArtifactContentByHash`。"
      testingStrategy:
        riskLevel: "P1 (High)"
        requiredTests:
          - { type: "UI Test (Manual)", description: "驗證版本選擇器能正確顯示，且選擇不同版本後，內容顯示區能正確更新。" }
    - function: "Frontend: showPasteInputModal(nodeId)"
      strategy: "前端函式。當使用者觸發『貼上內容』時，顯示一個包含 `<textarea>` 的模態視窗，並提供選項讓使用者指定內容類型（yaml, gs, html）。點擊儲存後，將內容與類型傳遞給後端 `createOrUpdateArtifact` 函式。"
      testingStrategy:
        riskLevel: "P1 (High)"
        requiredTests:
          - { type: "UI Test (Manual)", description: "驗證模態視窗能正常彈出與關閉，且能成功將不同類型的內容提交至後端。" }
          - { type: "Regression Test", description: "確保新的提交方式不會影響既有的檔案上傳功能。" }

# --- 第七次迭代規劃 (PS Scope) ---
requirements:
  inScope:
    - { id: "FR27", description: "使用者必須能夠檢視一個產物的完整版本歷史列表。" }
    - { id: "FR28", description: "使用者必須能夠選擇並檢視任一歷史版本的產物內容。" }
    - { id: "FR29", description: "使用者必須能夠透過一個彈出視窗，直接貼上文字內容來建立或更新產物。" }
    - { id: "FR30", description: "在貼上內容時，使用者必須能夠指定內容的語法類型（如 YAML, Google Apps Script, HTML）。" }
    - { id: "FR31", description: "在流程圖的角色節點上，必須提供一個可配置的外部連結（AI 角色連結）。" }
  outOfScope:
    - { id: "OOS-007", description: "不提供版本間的差異比對 (Diff) 功能。" }
    - { id: "OOS-008", description: "不提供對貼上的程式碼進行語法驗證或高亮的功能。" }
  nonFunctional:
    - { id: "NFR13", description: "版本歷史內容的載入時間應在 3 秒內完成。" }
    - { id: "NFR14", description: "新建立的後端服務函式必須包含 JSDoc 格式的註解。" }
    - { id: "NFR15", description: "必須為 `GitHubService.gs` 和 `SheetService.gs` 撰寫並擴充單元測試，確保程式碼覆蓋率不低於第六次迭代結束時的水平。" }

epicsAndStories:
  - epic: "Epic 1: 建立產物版本追溯能力"
    description: "將 GEMS 的版本控制能力從後端機制轉化為前端可見的賦能功能，提供完整的變更可追溯性。"
    stories:
      - id: "1.1"
        story: "作為一名專案經理，當我審核一份產物時，我希望能看到一個清晰的版本歷史列表，以便我能快速了解這份文件的所有變更紀錄。"
        acceptanceCriteria:
          - { id: "AC-1.1-1", description: "在產物檢視介面旁，有一個『版本歷史』按鈕或圖示。" }
          - { id: "AC-1.1-2", description: "點擊後，前端會呼叫後端 `getVersionHistory` 函式，並在 UI 上以列表形式顯示回傳的版本號、提交者與提交日期。" }
          - { id: "AC-1.1-3", description: "該列表應以降序（最新版本在上）排列。" }
        relatedFunctions: ["getVersionHistory()", "renderVersionHistoryViewer()"]
        affectedDataModels: ["Artifacts"]
      - id: "1.2"
        story: "作為一名專案經理，在看到版本歷史列表後，我希望能點選其中任一版本，並立即檢視該版本的完整內容，以便我能對比不同階段的產出。"
        acceptanceCriteria:
          - { id: "AC-1.2-1", description: "版本歷史列表中的每個項目都是可點擊的。" }
          - { id: "AC-1.2-2", description: "點擊一個歷史版本後，前端會帶著 `commitHash` 呼叫後端 `getArtifactContentByHash` 函式。" }
          - { id: "AC-1.2-3", description: "主要的內容顯示區域會被成功更新為所選歷史版本的內容，並有明確的視覺提示（如『您正在檢視版本 v1.2』）。" }
        relatedFunctions: ["getArtifactContentByHash()"]
        affectedDataModels: ["Artifacts"]

  - epic: "Epic 2: 優化產物提交與使用工作流"
    description: "全面優化使用者與產物互動的核心流程，降低操作摩擦，並將 GEMS 與外部 AI 工具無縫連結。"
    stories:
      - id: "2.1"
        story: "作為一名開發者，我希望能直接在流程圖節點上貼上我的 YAML、Google Apps Script (.gs) 或 HTML 內容，並指定其類型，而無需先在本機建立檔案再上傳，以極大加速我的工作流程。"
        sourceLog: "Vibe CEO
        發想; ICR (NIC-S6-002) [cite: 2]"
        acceptanceCriteria:
          - { id: "AC-2.1-1", description: "在節點的操作選單中，有一個『貼上內容』的選項。" }
          - { id: "AC-2.1-2", description: "點擊後會彈出一個模態視窗，包含一個大型文字輸入區和一個下拉選單，用於選擇內容類型 (預設為 YAML)。" }
          - { id: "AC-2.1-3", description: "成功提交後，後端 `createOrUpdateArtifact` 能正確處理傳入的文字內容與類型，並在 GitHub 上建立對應的檔案（如 `artifact-123.gs`）。" }
        relatedFunctions: ["showPasteInputModal()", "createOrUpdateArtifact()"]
        affectedDataModels: ["Artifacts"]
      - id: "2.2"
        story: "作為一個團隊成員，我希望在流程圖的角色節點上，能直接點擊一個圖示連結，就能在新分頁快速開啟一個預設好的 AI 提示詞網頁（如 Poe, ChatGPT），以便我能立即開始扮演該角色並產出文件。"
        sourceLog: "產品路線圖.md (功能項 1); ICR (NIC-S6-001) [cite: 1, 2]"
        acceptanceCriteria:
          - { id: "AC-2.2-1", description: "在 Mermaid.js 的節點定義中，可以為特定類型的節點增加一個可點擊的外部連結屬性。" }
          - { id: "AC-2.2-2", description: "當滑鼠懸停在角色節點上時，會出現一個清晰可辨的『AI 助手』圖示。" }
          - { id: "AC-2.2-3", description: "點擊該圖示後，會在新的瀏覽器分頁中打開一個可由使用者在設定檔中配置的 URL。" }
        relatedFunctions: ["Frontend: updateMermaidRenderingLogic()"]
        affectedDataModels: []

  - epic: "Epic 3: 鞏固技術品質基礎"
    description: "確保在快速交付新功能的同時，系統的穩定性與可維護性得到持續保障。"
    stories:
      - id: "3.1"
        story: "作為一名系統維護者，我需要為第六次迭代中重構的核心服務（GitHubService, SheetService）以及本次迭代新增的後端邏輯，建立一套全面的單元測試，以確保未來的變更不會意外破壞現有功能。"
        [cite_start]sourceLog: "ICR (NIC-S6-003) [cite: 2]"
        acceptanceCriteria:
          - { id: "AC-3.1-1", description: "在 `testrunner.gs` 檔案中，為 `GitHubService.gs` 的所有公開函式（如 `fetch`, `getArtifactContentByHash`）建立對應的測試案例。" }
          - { id: "AC-3.1-2", description: "為 `SheetService.gs` 的所有公開函式（如 `getVersionHistory`）建立對應的測試案例。" }
          - { id: "AC-3.1-3", description: "所有測試案例都應包含成功與失敗（如模擬 API 錯誤）的情境，並能獨立運行。" }
        relatedFunctions: []
        affectedDataModels: []