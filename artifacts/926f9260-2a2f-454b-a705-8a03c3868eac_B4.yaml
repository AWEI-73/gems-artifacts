projectId: "GEMS - 視覺化敏捷流程管理工具"
sprintId: 2
sprintGoal: "完成與 GitHub API 的核心整合，實現產物的版本控制與同步，並重構前端 SVG 渲染邏輯以償還技術債，提升系統的長期穩定性。"
version: "2.0"
status: "Approved"

stories:
  - storyId: "3.1"
    storyTitle: "作為一個開發者，我希望在我上傳產物後，系統能自動將該文件同步到指定的 GitHub Repo，以便讓文件與程式碼的版本保持一致。"
    technicalBrief: "此故事將首次整合 GitHub API。關鍵在於使用 Google Apps Script 的 `UrlFetchApp` 服務，並透過 `PropertiesService` 安全地管理 API Token 以避免硬編碼。所有 API 呼叫都必須包含符合 NFR3 要求的錯誤處理與超時機制。"
    acceptanceCriteria:
      - id: "AC-3.1-1"
        description: "當一份 YAML 檔案被成功儲存到 Google Sheet 後，一個後端函式會被觸發，以啟動 GitHub 同步流程。"
      - id: "AC-3.1-2"
        description: "後端 Apps Script 中有一個安全的配置區塊，用於存放 GitHub API Token, Repo 名稱, 分支名稱, 以及目標檔案路徑。"
      - id: "AC-3.1-3"
        description: "在 GitHub 的目標 Repo 中，可以查看到一個新的 commit，其內容與上傳的 YAML 文件完全相符。"
    requiredTests:
      - type: "Functionality Test"
        description: "驗證 YAML 檔案上傳後，能成功在指定的 GitHub Repo 路徑下看到內容相符的新 commit。"
      - type: "Security Test"
        description: "驗證 GitHub API Token 是透過 `PropertiesService` 或類似的安全機制儲存，而非硬編碼在程式碼中。"
    tasks:
      - taskId: "3.1-T1"
        type: "Backend"
        description: "開發：建立一個安全的配置管理機制 (使用 PropertiesService) 來儲存 GitHub Token 與 Repo 設定。"
        fulfills: ["AC-3.1-2"]
      - taskId: "3.1-T2"
        type: "Backend"
        description: "開發：實作核心同步邏輯，使用 UrlFetchApp 呼叫 GitHub API 將產物內容 commit 並 push 至指定 Repo。"
        fulfills: ["AC-3.1-1", "AC-3.1-3"]

  - storyId: "3.2"
    storyTitle: "作為一個系統，在成功將產物推送到 GitHub 後，我需要記錄下版本控制資訊，以便在 GEMS 內部建立產物與程式碼倉儲之間的追溯連結。"
    technicalBrief: "此故事依賴於 Story 3.1 的 API 呼叫。重點是解析 GitHub API 成功時回傳的 JSON 物件，並將 commit hash 與 blob URL 正確地寫回 Google Sheets 的 `Artifacts` 工作表對應的欄位。"
    acceptanceCriteria:
      - id: "AC-3.2-1"
        description: "後端函式能成功解析 GitHub API 的成功回應，並從中提取出 commit hash 和檔案的 blob URL。"
      - id: "AC-3.2-2"
        description: "在 `Artifacts` 工作表中，對應的產物紀錄列，其 `github_commit_hash` 與 `github_file_url` 欄位被成功更新。"
    requiredTests:
      - type: "Integration Test"
        description: "驗證 GitHub API 呼叫成功後，Google Sheets 中對應產物的 `github_commit_hash` 與 `github_file_url` 欄位被正確回填。"
      - type: "Error Handling Test"
        description: "（對應 NFR3）驗證當 GitHub API 呼叫失敗或超時，系統不會更新 Google Sheets 的欄位，並能記錄下明確的錯誤。"
    tasks:
      - taskId: "3.2-T1"
        type: "Backend"
        description: "開發：擴充 GitHub API 呼叫邏輯，使其能夠解析成功回應中的 JSON，提取 commit hash 與 file URL。"
        fulfills: ["AC-3.2-1"]
      - taskId: "3.2-T2"
        type: "Backend"
        description: "開發：實作將提取出的 GitHub 資訊更新回 Google Sheets 中 `Artifacts` 工作表對應紀錄的函式。"
        fulfills: ["AC-3.2-2"]

  - storyId: "4.1"
    storyTitle: "作為一個開發者，我想要將目前寫死在主程式碼中的 SVG 渲染邏輯，重構成一個可複用的元件，以提高程式碼的可維護性並為未來的圖表功能做準備。"
    technicalBrief: "此為償還技術債的重構任務。核心是將 Sprint 1 中與 SVG 渲染相關的程式碼，從主 HTML/JS 文件中抽離，封裝成一個獨立的 JavaScript 函式。此函式應接收結構化資料（如節點、連結陣列）並回傳完整的 SVG 字串，以實現關注點分離。"
    acceptanceCriteria:
      - id: "AC-4.1-1"
        description: "程式碼庫中存在一個獨立的函式（例如 `renderProcessDiagram(nodes, links)`），它能接收節點與連結資料作為輸入，並回傳一個完整的 SVG 字串。"
      - id: "AC-4.1-2"
        description: "前端主邏輯透過呼叫此函式來渲染流程圖，而不是在自身內部包含大量的 SVG 標籤生成程式碼。"
      - id: "AC-4.1-3"
        description: "[無迴歸測試] 重構後，流程圖的視覺外觀、節點位置、以及點擊節點觸發右側面板更新的行為，必須與第一次迭代結束時的狀態完全相同。"
    requiredTests:
      - type: "Regression Test"
        description: "（對應 AC-4.1-3）驗證重構後的流程圖，其視覺外觀、節點位置與點擊互動行為，與 Sprint 1 的版本完全一致，無任何功能或視覺上的退化。"
      - type: "Performance Test"
        description: "（對應 NFR4）驗證重構後的頁面載入速度與點擊節點時的反應速度，沒有可感知的延遲或效能下降。"
    tasks:
      - taskId: "4.1-T1"
        type: "Frontend"
        description: "開發：將現有的 SVG 渲染程式碼，封裝成一個獨立、可接收參數的 `renderProcessDiagram` 函式。"
        fulfills: ["AC-4.1-1"]
      - taskId: "4.1-T2"
        type: "Frontend"
        description: "重構：修改主 UI 腳本，移除舊的渲染邏輯，改為呼叫新的 `renderProcessDiagram` 函式來生成流程圖。"
        fulfills: ["AC-4.1-2"]
      - taskId: "4.1-T3"
        type: "QA"
        description: "測試：執行回歸測試，確保重構後的視覺與互動功能與 Sprint 1 完全一致，並符合 AC-4.1-3 的要求。"
        fulfills: ["AC-4.1-3"]