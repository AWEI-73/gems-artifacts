projectId: "GEMS - 視覺化敏捷流程管理工具"
sprintId: 5
sprintGoal: "啟動 GEMS 的核心架構升級。核心任務是實現前端快取以達成零延遲的 UI 互動，並將內容儲存後端重構至 GitHub，實現專業、可靠的版本控制，為平台未來的成長奠定基礎。"
version: "3.3"
status: "Proposed"

# ===================================================================
# Foundational Architecture & Principles
# 來源：mvp_blueprint_v3.yaml (無損轉譯)
# ===================================================================
foundationalArchitecture:
  highLevelArchitecture:
    architecturalStyle: "演進為『具備前端狀態的 Serverless Web App』架構。"
    architecturalPrinciples:
      - principle: "狀態前移 (Stateful Frontend, Stateless Backend)"
        description: "將應用程式的『UI 狀態』移至前端瀏覽器中進行管理，後端專注於無狀態的數據 CRUD 操作。"
      - principle: "索引與內容分離 (Index-Content Separation)"
        description: "嚴格區分『元數據索引』（儲存於 Google Sheets）與『文件內容』（儲存於 GitHub），提升系統的模組化與擴展性。"
    systemDiagram: |
      graph TD;
          A[使用者瀏覽-前端快取] --> B[HTML Service (UI)];
          B -- Client-side JS --> C{Google Apps Script (Server-side)};
          C -- SpreadsheetApp (讀寫索引) --> D[Google Sheets (Metadata Index)];
          C -- UrlFetchApp (讀寫內容) --> E[GitHub API v3 (Content Store)];
          C -- PropertiesService --> F[Script Properties (API Keys)];
    frontendBackendIntegration:
      method: "`google.script.run`"
      description: "前端 JavaScript 透過 `google.script.run` 非同步呼叫後端的 `.gs` 函式。本次迭代將引入前端快取機制，以大幅減少此類呼叫的頻率。"

  techStack:
    - category: "Frontend State Management"
      technology: "In-memory JavaScript Object"
      reason: "[本次迭代引入] 作為前端的『單一事實來源』，實現即時 UI 互動。"
    - category: "Backend Runtime"
      technology: "Google Apps Script (V8 Runtime)"
      reason: "[未變更] 核心後端運行環境。"
    - category: "Database"
      technology: "Google Sheets"
      reason: "[職責變更] 從主資料庫變更為『元數據索引 (Metadata Index)』。"
    - category: "Content Store"
      technology: "GitHub Repository (via REST API v3)"
      reason: "[本次迭代引入] 作為所有 YAML 文件的主要儲存與版本控制系統。"
    - category: "Key Libraries"
      technology: "js-yaml"
      reason: "[未變更] 用於在後端高效解析傳入的 YAML 文件內容。"

  dataModels:
    - modelName: "Projects"
      description: "儲存專案的清單與基本資訊。此模型在本次迭代中結構不變。"
      fields:
        - { name: "project_id", type: "string (Primary Key)" }
        - { name: "project_name", type: "string" }
        - { name: "status", type: "string" }
        - { name: "created_at", type: "Timestamp" }
    - modelName: "Artifacts"
      description: "儲存所有產物的元數據索引。文件內容本身儲存在 GitHub。"
      fields:
        - { name: "artifact_id", type: "string (Primary Key)" }
        - { name: "project_id", type: "string (Foreign Key)" }
        - { name: "node_id", type: "string" }
        - { name: "artifact_type", type: "string" }
        - { name: "version", type: "string" }
        - { name: "key_info_1", type: "string" }
        - { name: "key_info_2", type: "string" }
        - { name: "github_file_url", type: "string (NEW)" }
        - { name: "github_commit_hash", type: "string (NEW)" }
        - { name: "created_at", type: "Timestamp" }
        - { name: "raw_content", type: "string (DEPRECATED - To be removed)" }
    - modelName: "Ideas"
      description: "儲存來自『創意牆』的文字筆記。此模型在本次迭代中結構不變。"
      fields:
        - { name: "idea_id", type: "string (Primary Key)" }
        - { name: "project_id", type: "string (Foreign Key)" }
        - { name: "content", type: "string" }
        - { name: "created_at", type: "Timestamp" }
        - { name: "created_by", type: "string" }
        - { name: "status", type: "string" }
        - { name: "tags", type: "string (Comma-separated)" }

# ===================================================================
# Stories & Tasks for Sprint 5
# ===================================================================
stories:
  - storyId: "9.1"
    storyTitle: "作為一名使用者，我希望能一次性載入所有專案與產物的元數據到前端，以便在應用程式內進行任何導航或篩選操作時，都能獲得即時的 UI 反應，無需等待後端載入。"
    technicalBrief: "核心是開發 `initializeAppWithCache()` API，一次性聚合所有元數據返回給前端，並建立前端快取機制，達成 UI 互動零延遲的目標。"
    technicalContext:
      riskLevel: "P1 (High)"
      relatedNFR:
        - id: "NFR9"
          description: "數據預載入後，前端 UI 互動的響應時間必須低於 100 毫秒。"
      architecture:
        - component: "initializeAppWithCache()"
          strategy: "應用啟動時的唯一數據載入函式。查詢並聚合所有元數據（專案、產物），一次性返回給前端進行快取。"
          performanceConsiderations: "此函式執行時間將直接影響應用初始載入速度，後端需優化 Google Sheets 的讀取操作（如使用 `getValues()` 一次性讀取）。"
      relatedFunctions: ["initializeAppWithCache()"]
      affectedDataModels: ["Projects", "Artifacts"]
    acceptanceCriteria:
      - { id: "AC-9.1-1", description: "應用程式啟動時，會呼叫一次 `initializeAppWithCache()` API，並將返回的完整元數據儲存在一個前端的 JavaScript 物件中。" }
      - { id: "AC-9.1-2", description: "當我點擊「切換專案」下拉選單時，專案列表的切換是即時的，不應觸發任何對後端的 `google.script.run` 呼叫。" }
      - { id: "AC-9.1-3", description: "當我選擇一個專案後，流程圖的渲染是即時的，其所需的產物元數據皆來自前端快取。" }
    requiredTests:
      - type: "Integration Test"
        description: "驗證 `initializeAppWithCache()` 回傳的數據能被前端正確快取。"
      - type: "E2E Test"
        description: "模擬使用者操作，驗證 UI 互動的即時性。"
    tasks:
      - taskId: "9.1-T1"
        type: "Backend"
        description: "開發：實作後端 `initializeAppWithCache()` 函式，確保能一次性讀取並聚合 Sheets 中的 Projects 與 Artifacts 元數據。"
        fulfills: ["AC-9.1-1"]
      - taskId: "9.1-T2"
        type: "Frontend"
        description: "開發：建立前端快取機制 (in-memory JavaScript object)，並在應用啟動時呼叫 API 填充數據。"
        fulfills: ["AC-9.1-1"]
      - taskId: "9.1-T3"
        type: "Frontend"
        description: "重構：修改專案切換與流程圖渲染的邏輯，使其完全依賴前端快取，移除不必要的後端呼叫。"
        fulfills: ["AC-9.1-2", "AC-9.1-3"]
      - taskId: "9.1-T4"
        type: "QA"
        description: "測試：執行整合測試，驗證後端 API 回傳的數據結構正確，且前端能成功初始化快取。"
        fulfills: ["AC-9.1-1"]
      - taskId: "9.1-T5"
        type: "QA"
        description: "測試：執行端對端測試，驗證 UI 互動（切換專案、渲染圖表）的響應時間低於 100ms。"
        fulfills: ["AC-9.1-2", "AC-9.1-3"]

  - storyId: "10.1"
    storyTitle: "作為一名系統維護者，我希望能執行一個一次性的遷移腳本，將所有儲存在 Google Sheets `raw_content` 欄位中的產物內容，安全地遷移至指定的 GitHub Repository，以便完成數據儲存的架構分離。"
    technicalBrief: "開發一個一次性的 GAS 腳本 `migrateContentToGitHub`，讀取 `Artifacts` 表，將 `raw_content` 推送到 GitHub，並將新的 URL 和 commit hash 寫回對應欄位。"
    technicalContext:
      riskLevel: "P1 (High)"
      relatedNFR: []
      architecture:
        - component: "Data Migration Script"
          strategy: "開發一個獨立、可手動觸發的 GAS 函式，具備冪等性，確保重複執行不會造成數據損壞。"
      relatedFunctions: ["migrateContentToGitHub()"]
      affectedDataModels: ["Artifacts"]
    acceptanceCriteria:
      - { id: "AC-10.1-1", description: "一個名為 `migrateContentToGitHub` 的後端函式被建立。" }
      - { id: "AC-10.1-2", description: "手動執行此函式後，`Artifacts` 表中所有原先有 `raw_content` 的行，其 `github_file_url` 和 `github_commit_hash` 欄位都被成功填充。" }
      - { id: "AC-10.1-3", description: "隨機抽樣檢查，確認 Sheets 中的 URL 能連結到 GitHub 上對應的檔案，且內容完全一致。" }
    requiredTests:
      - type: "Integration Test"
        description: "在測試環境中完整運行遷移腳本，驗證其正確性與冪等性。"
    tasks:
      - taskId: "10.1-T1"
        type: "Backend"
        description: "開發：撰寫 `migrateContentToGitHub` 函式，包含讀取 Sheets、呼叫 GitHub API 建立檔案、寫回 URL 與 commit hash 的邏輯。"
        fulfills: ["AC-10.1-1", "AC-10.1-2"]
      - taskId: "10.1-T2"
        type: "Backend"
        description: "準備：設定 GitHub PAT 並安全地儲存在 PropertiesService 中，供遷移腳本使用。"
        fulfills: ["AC-10.1-1"]
      - taskId: "10.1-T3"
        type: "QA"
        description: "測試：在測試用的 Google Sheet 上完整執行遷移腳本，並驗證數據遷移的準確性與腳本的冪等性。"
        fulfills: ["AC-10.1-2", "AC-10.1-3"]

  - storyId: "10.2"
    storyTitle: "作為一名使用者，當我點擊流程圖中的一個節點時，我希望能從 GitHub 無縫地載入並看到該產物的最新內容，以便我能查閱詳細資訊。"
    technicalBrief: "重構讀取產物內容的流程。開發 `getArtifactContent(artifactId)` API，使其從 Sheets 獲取 GitHub URL，再透過 GitHub API 取得文件內容。"
    technicalContext:
      riskLevel: "P1 (High)"
      relatedNFR: []
      architecture:
        - component: "getArtifactContent(artifactId)"
          strategy: "根據 artifactId，從 Google Sheets 獲取 GitHub URL，再透過 GitHub API 獲取文件內容返回給前端。"
          securityConsiderations: "對 GitHub API 的請求必須使用安全的認證方式（PAT），且 PAT 應儲存在 PropertiesService 中。"
      relatedFunctions: ["getArtifactContent(artifactId)"]
      affectedDataModels: ["Artifacts"]
    acceptanceCriteria:
      - { id: "AC-10.2-1", description: "當使用者點擊一個節點時，前端會呼叫 `getArtifactContent(artifactId)` API。" }
      - { id: "AC-10.2-2", description: "文件內容被成功返回並顯示在前端的內容區域。" }
      - { id: "AC-10.2-3", description: "如果 GitHub 檔案不存在或無法存取，前端會顯示一個清晰的錯誤訊息。" }
    requiredTests:
      - type: "Integration Test"
        description: "測試 `getArtifactContent` 的端到端流程。"
      - type: "Integration Test"
        description: "測試錯誤處理，例如當 GitHub 檔案不存在或認證失敗時，函式應返回清晰的錯誤訊息。"
    tasks:
      - taskId: "10.2-T1"
        type: "Backend"
        description: "開發：實作後端 `getArtifactContent` 函式，完成 Sheets 查詢 -> GitHub API 呼叫 -> 返回內容的完整流程。"
        fulfills: ["AC-10.2-2"]
      - taskId: "10.2-T2"
        type: "Backend"
        description: "開發：在 `getArtifactContent` 中加入完整的錯誤處理機制，處理 GitHub 檔案不存在或 API 認證失敗等情況。"
        fulfills: ["AC-10.2-3"]
      - taskId: "10.2-T3"
        type: "Frontend"
        description: "重構：修改節點點擊事件，使其呼叫新的 `getArtifactContent` API 並將返回內容渲染到畫面，同時處理錯誤訊息的顯示。"
        fulfills: ["AC-10.2-1", "AC-10.2-3"]
      - taskId: "10.2-T4"
        type: "QA"
        description: "測試：執行整合測試，驗證正常路徑與所有已知的錯誤處理路徑。"
        fulfills: ["AC-10.2-2", "AC-10.2-3"]

  - storyId: "10.3"
    storyTitle: "作為一名使用者，當我上傳或更新一個產物時，我希望能將文件內容安全地儲存到 GitHub，並在 Google Sheets 中更新其索引，以便完成一次完整的產物版本迭代。"
    technicalBrief: "開發具備事務性的 `createOrUpdateArtifact` API。此 API 必須先成功將內容 commit 至 GitHub，然後才能將元數據寫回 Google Sheets。"
    technicalContext:
      riskLevel: "P0 (Critical)"
      relatedNFR:
        - id: "NFR10"
          description: "系統必須確保 Google Sheets 中的索引與 GitHub 中的內容之間 100% 的數據一致性。"
      architecture:
        - component: "createOrUpdateArtifact(artifactData, content)"
          strategy: "具備事務性的寫入操作。先將內容 commit 至 GitHub，若成功，再將元數據（包含 commit hash 和 file URL）寫回 Google Sheets。"
          performanceConsiderations: "寫入操作的延遲主要來自 GitHub API。應在前端實施『樂觀更新 (Optimistic Update)』以改善使用者體驗。"
      relatedFunctions: ["createOrUpdateArtifact(metadata, content)"]
      affectedDataModels: ["Artifacts"]
    acceptanceCriteria:
      - { id: "AC-10.3-1", description: "當使用者儲存產物時，前端會呼叫 `createOrUpdateArtifact(metadata, content)` API。" }
      - { id: "AC-10.3-2", description: "後端成功將 `content` commit 到 GitHub，並將元數據與新的 `commit_hash` 更新到 Google Sheets。" }
      - { id: "AC-10.3-3", description: "如果 GitHub 操作失敗，Google Sheets 不應有任何變更。如果 Sheets 操作失敗，後端必須記錄一筆待修復日誌。" }
    requiredTests:
      - type: "Integration Test"
        description: "驗證完整的寫入流程，確保 GitHub commit 成功後，Google Sheets 的元數據也被正確更新。"
      - type: "Integration Test"
        description: "測試事務性保障：若 GitHub 操作失敗，驗證 Google Sheets 的數據沒有被修改。"
      - type: "Integration Test"
        description: "測試事務性保障：若 Sheets 操作失敗，驗證系統有留下可追溯的錯誤日誌。"
    tasks:
      - taskId: "10.3-T1"
        type: "Backend"
        description: "開發：實作後端 `createOrUpdateArtifact` 函式，嚴格遵循『先寫 GitHub，成功後再寫 Sheets』的事務性邏輯。"
        fulfills: ["AC-10.3-2", "AC-10.3-3"]
      - taskId: "10.3-T2"
        type: "Backend"
        description: "開發：為 `createOrUpdateArtifact` 函式添加詳細的錯誤日誌記錄機制，特別是針對 Sheets 寫入失敗的情況。"
        fulfills: ["AC-10.3-3"]
      - taskId: "10.3-T3"
        type: "Frontend"
        description: "重構：修改產物儲存功能，使其呼叫新的 `createOrUpdateArtifact` API。"
        fulfills: ["AC-10.3-1"]
      - taskId: "10.3-T4"
        type: "QA"
        description: "測試：執行整合測試，重點測試事務性保障。模擬 GitHub API 失敗，並驗證 Sheets 數據未被更改。"
        fulfills: ["AC-10.3-2", "AC-10.3-3"]